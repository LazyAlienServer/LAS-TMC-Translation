from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone

from core.models import TimeStampedMixin, UUIDPrimaryKeyMixin, SoftDeleteMixin


User = get_user_model()


class SourceArticle(TimeStampedMixin, UUIDPrimaryKeyMixin, SoftDeleteMixin):
    """
    Model for all articles

    Local fields:
        - author
        - title
        - summary
        - content_json  ---  the source data generated by rich text editors
        - content_html  ---  the cache data for frontend display
        - content_hash  ---  the data used for comparison
        - published_at
        - last_moderation_at
        - status

    Mixin fields:
        - created_at
        - updated_at
        - id
        - is_deleted
    """

    class ArticleStatus(models.IntegerChoices):
        """
        5 different article status
        """
        DRAFT = 0
        PENDING = 1
        PUBLISHED = 2
        REJECTED = 3
        UNPUBLISHED = 4
        DELETED = 5

    author = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name="articles")

    title = models.CharField(max_length=60, db_index=True, default="")
    content_md = models.TextField(blank=True, default="")

    status = models.IntegerField(choices=ArticleStatus.choices, default=ArticleStatus.DRAFT, db_index=True)

    last_moderation_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        ordering = ['-created_at']

        indexes = [
            models.Index(fields=['author', 'created_at']),
            models.Index(fields=['status', 'created_at']),
        ]

    def __str__(self):
        return self.title


class PublishedArticle(UUIDPrimaryKeyMixin):

    article = models.ForeignKey(SourceArticle, on_delete=models.CASCADE, related_name="article_published_version")

    title = models.CharField(max_length=60, db_index=True, default="")
    content_md = models.TextField(blank=True, default="")

    published_at = models.DateTimeField(default=timezone.now, db_index=True, editable=False)

    class Meta:
        ordering = ['-published_at']

    def __str__(self):
        return f"Published version of article {self.article}"


class ArticleSnapshot(UUIDPrimaryKeyMixin):
    """
    Freeze the current version of the article for review and retrospection.

    Mixin fields:
        - id
    """

    article = models.ForeignKey(SourceArticle, on_delete=models.CASCADE, related_name="article_snapshots")

    title = models.CharField(max_length=60, db_index=True, default="")
    content_md = models.TextField(blank=True, default=dict)
    content_hash = models.CharField(max_length=64, blank=True, default="", db_index=True)

    created_at = models.DateTimeField(default=timezone.now, db_index=True, editable=False)

    class Meta:
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['article', 'created_at']),
            models.Index(fields=['article', 'content_hash']),
        ]

    def __str__(self):
        return f"Snapshot of article {self.article_id} created @ {self.created_at}"


class ArticleModerationEvent(UUIDPrimaryKeyMixin):
    """
    Record moderation events related to articles

    Mixin fields:
        - id
    """

    class ModerationEventType(models.IntegerChoices):
        """
        3 different moderation event types
        This model's choices correspond to the choices of 'SnapshotType'
        """
        APPROVE = 1
        REJECT = 2
        UNPUBLISH = 3

    article = models.ForeignKey(SourceArticle, on_delete=models.CASCADE, related_name="article_moderation_events")
    snapshot = models.ForeignKey(
        ArticleSnapshot, on_delete=models.SET_NULL, null=True, related_name="related_moderation_events"
    )

    annotation = models.TextField(null=True, blank=True)

    type = models.IntegerField(choices=ModerationEventType.choices)
    moderator = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name="article_moderation_events_done")

    created_at = models.DateTimeField(default=timezone.now, db_index=True, editable=False)

    class Meta:
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['article', 'created_at']),
            models.Index(fields=['moderator', 'created_at']),
            models.Index(fields=['snapshot', 'created_at']),
            models.Index(fields=['type', 'created_at']),
        ]

    def __str__(self):
        return f"Operation {self.get_type_display()} by {self.moderator_id} on article {self.article_id} @ {self.created_at}"
